/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 
#define THUMBS LH1 LH0 RH0 RH1

/* left-hand HRMs */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/ {
    behaviors {
        shift_caps_tap_dance: shift_caps_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS_TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&kp CAPSLOCK>, <&caps_word>;
        };

        space_enter: space_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACE_ENTER";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp RET>;

            tapping-term-ms = <300>;
        };
    };

    combos {
        compatible = "zmk,combos";

        toggle_numpad {
            bindings = <&tog 5>;
            key-positions = <LH0 RH0>;
        };

        tab {
            bindings = <&kp TAB>;
            require-prior-idle-ms = <150>;
            key-positions = <LM1 LM0>;
        };

        backspace {
            bindings = <&kp BSPC>;
            require-prior-idle-ms = <150>;
            key-positions = <RM0 RM1>;
        };

        copy {
            bindings = <&kp LG(C)>;
            require-prior-idle-ms = <150>;
            key-positions = <LB3 LB2>;
        };

        paste {
            bindings = <&kp LG(V)>;
            require-prior-idle-ms = <150>;
            key-positions = <LB2 LB1>;
        };

        cut {
            bindings = <&kp LG(X)>;
            require-prior-idle-ms = <150>;
            key-positions = <LB4 LB3>;
        };

        fcp_mode {
            bindings = <&tog 6>;
            key-positions = <LH1 RH1>;
        };

        chatgpt {
            bindings = <&kp LS(LA(LG(SPACE)))>;
            require-prior-idle-ms = <150>;require-prior-idle-ms = <150>;
            key-positions = <LB1 LB0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        sweep34 {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T           &kp Y      &kp U  &kp I      &kp O    &kp P
&hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D  &hml LGUI F  &kp G           &kp H      &hmr LGUI J  &hmr LEFT_ALT K      &hmr LEFT_CONTROL L    &hmr LEFT_SHIFT SEMI
&kp Z  &kp X  &kp C  &kp V  &kp B           &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH
                     &mo 4  &kp SPACE    &kp ENTER  &mo 1
            >;
        };

        sweep34_raise {
            bindings = <
&kp N1                 &kp N2            &kp N3        &kp N4    &kp N5        &kp N6         &kp N7     &kp N8    &kp N9             &kp N0
&kp LEFT_SHIFT  &sk LEFT_CONTROL  &sk LEFT_ALT  &sk LGUI  &kp TAB       &kp BACKSPACE  &kp LEFT   &kp DOWN  &kp UP             &kp RIGHT
&kp GRAVE              &kp FSLH          &kp BSLH      &kp SQT   &kp ESCAPE    &kp MINUS      &kp EQUAL  &kp LBKT  &kp RIGHT_BRACKET  &kp SEMICOLON
                                                       &mo 4     &kp SPACE     &kp ENTER      &mo 1
            >;
        };

        sweep34_left_mods {
            bindings = <
&kp Q           &kp W             &kp E         &kp R     &kp T        &kp Y      &kp U  &kp I      &kp O    &kp P
&sk LEFT_SHIFT  &sk LEFT_CONTROL  &sk LEFT_ALT  &sk LGUI  &kp TAB      &kp H      &kp J  &kp K      &kp L    &kp SEMI
&kp Z           &kp X             &kp C         &kp V     &kp B        &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH
                                                &mo 4     &kp SPACE    &kp ENTER  &mo 1
            >;
        };

        sweep34_right_mods {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y          &kp U     &kp I         &kp O             &kp P
&kp A  &kp S  &kp D  &kp F  &kp G        &kp BACKSPACE  &kp LGUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT
&kp Z  &kp X  &kp C  &kp V  &kp B        &kp N          &kp M     &kp COMMA     &kp DOT           &kp FSLH
                     &mo 4  &kp SPACE    &kp ENTER      &mo 1
            >;
        };

        sweep34_lower {
            bindings = <
&kp LC(LEFT)   &kp LSHFT             &kp LEFT_COMMAND              &kp TAB                       &kp LC(RIGHT)                   &kp CARET          &kp AMPERSAND           &kp ASTERISK            &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp LG(LC(A))  &kp LG(LC(LS(N4)))    &kp LS(LA(LC(LG(NUMBER_1))))  &kp LA(LC(LG(LS(NUMBER_2))))  &kp LS(LA(LC(LG(NUMBER_3))))    &kp LA(LC(ENTER))  &kp LA(LC(LEFT_ARROW))  &kp LA(LC(DOWN_ARROW))  &kp LA(LC(UP_ARROW))  &kp LA(LC(RIGHT_ARROW))
&kp C_BRI_DEC  &kp C_BRIGHTNESS_INC  &kp C_MUTE                    &kp C_VOL_DN                  &kp C_VOLUME_UP                 &kp UNDERSCORE     &kp PLUS                &kp LEFT_BRACE          &kp RIGHT_BRACE       &kp COLON
                                                                   &mo 4                         &kp SPACE                       &kp ENTER          &mo 1
            >;
        };

        numpad_layer {
            bindings = <
&bt BT_SEL 0       &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_CLR       &bootloader    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_PLUS   &bootloader
&trans             &trans            &trans        &trans           &trans          &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS  &trans
&ext_power EP_TOG  &kp LEFT_COMMAND  &kp LG(W)     &kp LS(LC(TAB))  &kp LC(TAB)     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER  &trans
                                                   &kp DOWN         &kp UP_ARROW    &kp KP_NUMBER_0  &kp KP_DOT
            >;
        };

        fcp_layer_left_1 {
            bindings = <
&kp LS(Z)  &kp I           &kp E          &kp O          &kp T        &trans  &trans  &trans  &trans  &trans
&kp A      &kp LA(K)       &kp J          &kp L          &kp BSPC     &trans  &trans  &trans  &trans  &trans
&kp LG(Z)  &kp LEFT_SHIFT  &kp LG(MINUS)  &kp LG(EQUAL)  &kp LG(B)    &trans  &trans  &trans  &trans  &trans
                                          &mo 7          &trans       &trans  &trans
            >;
        };

        fcp_layer_left_2 {
            bindings = <
&trans  &kp LA(LBKT)   &kp LA(RIGHT_BRACKET)  &kp LG(R)  &trans     &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(MINUS)  &kp LC(EQUAL)          &trans     &trans     &trans  &trans  &trans  &trans  &trans
&trans  &kp LA(COMMA)  &kp LA(DOT)            &trans     &kp ESC    &trans  &trans  &trans  &trans  &trans
                                              &trans     &trans     &trans  &trans
            >;
        };
    };
};
